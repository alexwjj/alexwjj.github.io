(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{596:function(s,t,n){"use strict";n.r(t);var e=n(7),a=Object(e.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("blockquote",[n("p",[s._v("进阶版 要多练习 😈😈😈")])]),s._v(" "),n("h2",{attrs:{id:"好文"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#好文"}},[s._v("#")]),s._v(" 好文")]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://mp.weixin.qq.com/s/hN2yTtFLyFBWmOrKF-E8lQ",target:"_blank",rel:"noopener noreferrer"}},[s._v("webpack 打包优化"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.im/post/6865957891988258823",target:"_blank",rel:"noopener noreferrer"}},[s._v("web打印，一篇搞定"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.im/post/6844903845227659271",target:"_blank",rel:"noopener noreferrer"}},[s._v("正则表达式不要背"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.im/post/6844903896637259784",target:"_blank",rel:"noopener noreferrer"}},[s._v("一个合格(优秀)的前端都应该阅读这些文章"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.im/post/6844903638389915661",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vue源码阅读前必须知道javascript的基础内容"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.im/post/6844903926110617613",target:"_blank",rel:"noopener noreferrer"}},[s._v("灵活运用CSS开发技巧"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.im/post/6844903767926636558",target:"_blank",rel:"noopener noreferrer"}},[s._v("一篇文章构建你的 NodeJS 知识体系"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.im/post/6844903679162581005",target:"_blank",rel:"noopener noreferrer"}},[s._v("vue插件开发、文档书写、github发布、npm包发布一波流"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.im/post/6844904116339261447",target:"_blank",rel:"noopener noreferrer"}},[s._v("2020年前端面试复习必读文章"),n("OutboundLink")],1)])]),s._v(" "),n("h2",{attrs:{id:"_1-注意点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-注意点"}},[s._v("#")]),s._v(" 1.注意点")]),s._v(" "),n("ul",[n("li",[s._v("IOS 无法识别"),n("strong",[s._v("yy-mm-dd")]),s._v("这种带 - 的时间格式'")]),s._v(" "),n("li",[n("strong",[s._v("typeof null === 'object':")]),s._v(" 在 JS 的最初版本中，使用的是 32 位系统，为了性能考虑使用低位存储了变量的类型信息，000 开头代表是对象，然而 null 表示为全零，所以将它错误的判断为 object 。")]),s._v(" "),n("li",[s._v("原生"),n("strong",[s._v("sort")]),s._v("使用的是哪些排序算法？插入排序和快速排序结合的排序算法")]),s._v(" "),n("li",[n("strong",[s._v("数组扁平化")]),s._v("：arr.toString().split(',')，注意返回数组中的数据类型")]),s._v(" "),n("li",[s._v("求"),n("strong",[s._v("最大值")]),s._v(" Math.max.apply(null, arr) Math.max.call(null, ...arr)")]),s._v(" "),n("li",[n("strong",[s._v("async函数")]),s._v("就是将 Generator 函数的星号（*）替换成async，将yield替换成await。")]),s._v(" "),n("li",[s._v("vue.js中组件"),n("strong",[s._v("export default 中name")]),s._v("的三种作用：vue-tools调试，keep-alive识别组件，组件模板递归调用自己")]),s._v(" "),n("li",[s._v('Object.prototype.toString.call(null) === "[object Null]"')])]),s._v(" "),n("h2",{attrs:{id:"_2-判断一个数组的类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-判断一个数组的类型"}},[s._v("#")]),s._v(" 2.判断一个数组的类型")]),s._v(" "),n("p",[s._v("1.判断是否具有数组某些方法\n"),n("code",[s._v("if(arr.sort()){}")])]),s._v(" "),n("p",[s._v("2.instanceof(某些IE版本不正确)"),n("code",[s._v("arr instanceof Array")])]),s._v(" "),n("p",[s._v("3."),n("code",[s._v("Array.isArray()")])]),s._v(" "),n("p",[s._v("4."),n("code",[s._v("Object.prototype.toString.call(arr);")]),s._v(" // '[object Array]'")]),s._v(" "),n("p",[s._v("5.constructor方法"),n("code",[s._v("arr.constructor === Array")])]),s._v(" "),n("p",[s._v("6.通用办法")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var isArray = Array.isArray || function(obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h2",{attrs:{id:"_3-变量提升-函数提升"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-变量提升-函数提升"}},[s._v("#")]),s._v(" 3.变量提升 && 函数提升")]),s._v(" "),n("ul",[n("li",[s._v("js查找变量 先在 "),n("strong",[s._v("当前作用域中查找")]),s._v("  存在则返回，不存在则向上查找")]),s._v(" "),n("li",[n("strong",[s._v("函数的优先权")]),s._v("是最高的，它永远被提升至作用域最顶部，然后才是函数表达式和变量按顺序执行\n变量提升是人为实现的问题，而函数提升在当初设计时是有目的的。")])]),s._v(" "),n("h2",{attrs:{id:"_4-事件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-事件"}},[s._v("#")]),s._v(" 4.事件")]),s._v(" "),n("ul",[n("li",[s._v("事件委托：让利用事件冒泡的原理，让自己的所触发的事件，让他的父元素代替执行！")]),s._v(" "),n("li",[s._v("事件捕获阶段(与冒泡相反)）=>目标元素阶段=>事件冒泡阶段")])]),s._v(" "),n("h3",{attrs:{id:"addeventlistener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#addeventlistener"}},[s._v("#")]),s._v(" addEventListener")]),s._v(" "),n("ul",[n("li",[s._v("该函数的第三个参数可以是布尔值，也可以是对象。对于布尔值 useCapture 参数来说，该参数"),n("strong",[s._v("默认值为 false")]),s._v(" 。useCapture 决定了注册的事件是捕获事件(true)还是冒泡事件（false）。")])]),s._v(" "),n("p",[s._v("如果一个节点中的子节点是动态生成的，那么子节点需要注册事件的话应该注册在父节点上")]),s._v(" "),n("ul",[n("li",[s._v("阻止事件冒泡：event.stopPropagation()")]),s._v(" "),n("li",[s._v("阻止默认事件：event.preventDefault()")])]),s._v(" "),n("h3",{attrs:{id:"event-loop"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#event-loop"}},[s._v("#")]),s._v(" Event loop")]),s._v(" "),n("p",[s._v("JS 是门"),n("strong",[s._v("非阻塞单线程语言")]),s._v(",如果 JS 是门多线程的语言话，我们在多个线程中处理 DOM 就可能会发生问题（一个线程中新加节点，另一个线程中删除节点），当然可以引入读写锁解决这个问题")]),s._v(" "),n("h3",{attrs:{id:"event-loop-顺序是这样的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#event-loop-顺序是这样的"}},[s._v("#")]),s._v(" Event loop 顺序是这样的")]),s._v(" "),n("p",[s._v("1.执行同步代码 // console")]),s._v(" "),n("p",[s._v("2.执行栈为空，查询是否有微任务需要执行")]),s._v(" "),n("p",[s._v("3.执行所有微任务 // Promise.then")]),s._v(" "),n("p",[s._v("4.执行宏任务中的异步代码 // setTimeout")]),s._v(" "),n("p",[s._v("5.然后开始下一轮 Event loop，")]),s._v(" "),n("h3",{attrs:{id:"任务队列"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#任务队列"}},[s._v("#")]),s._v(" 任务队列")]),s._v(" "),n("p",[s._v("不同的任务源会被分配到不同的 Task 队列中，任务源可以分为 微任务（microtask） 和 宏任务（macrotask）\n微任务包括 process.nextTick ，"),n("strong",[s._v("promise")]),s._v(" ，Object.observe ，MutationObserver\n宏任务包括 script ，"),n("strong",[s._v("setTimeout")]),s._v(" ，"),n("strong",[s._v("setInterval")]),s._v(" ，setImmediate ，I/O ，UI rendering")]),s._v(" "),n("h2",{attrs:{id:"_5-http"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-http"}},[s._v("#")]),s._v(" 5.HTTP")]),s._v(" "),n("p",[n("strong",[s._v("简单快速")]),s._v("：客户向服务器请求服务时，只需传送请求方法和路径")]),s._v(" "),n("p",[n("strong",[s._v("灵活")]),s._v("：HTTP允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记")]),s._v(" "),n("p",[n("strong",[s._v("无连接")]),s._v("：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接 (深入-持久连接、管线化)")]),s._v(" "),n("p",[n("strong",[s._v("无状态")]),s._v("：HTTP协议是无状态协议( Cookie 的出现)")]),s._v(" "),n("h3",{attrs:{id:"http-请求方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#http-请求方法"}},[s._v("#")]),s._v(" http 请求方法")]),s._v(" "),n("p",[n("strong",[s._v("HTTP1.0")]),s._v("定义了三种请求方法： GET, POST 和 HEAD方法。")]),s._v(" "),n("p",[n("strong",[s._v("HTTP1.1")]),s._v("新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。")]),s._v(" "),n("h3",{attrs:{id:"一般的http连接都是"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一般的http连接都是"}},[s._v("#")]),s._v(" 一般的http连接都是：")]),s._v(" "),n("ul",[n("li",[s._v("三次握手建立连接，")]),s._v(" "),n("li",[s._v("发送http请求报文，获取响应报文，")]),s._v(" "),n("li",[s._v("通过四次挥手，中断连接")]),s._v(" "),n("li",[s._v("HTTP1.1中connection"),n("strong",[s._v("默认开启keep-alive")]),s._v("，就不需要连续的建立然后中断")])]),s._v(" "),n("h2",{attrs:{id:"http-状态码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#http-状态码"}},[s._v("#")]),s._v(" http 状态码")]),s._v(" "),n("ul",[n("li",[s._v("1xx指示信息，请求已接收，继续处理")]),s._v(" "),n("li",[s._v("2xx成功，请求已成功")]),s._v(" "),n("li",[s._v("3xx重定向，要完成请求必须要进行下一步操作")]),s._v(" "),n("li",[s._v("4xx客户端错误，请求有语法错误或无法实现")]),s._v(" "),n("li",[s._v("5xx服务端错误，服务器未能实现合法的请求")])]),s._v(" "),n("h2",{attrs:{id:"_6-浏览器渲染页面的过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-浏览器渲染页面的过程"}},[s._v("#")]),s._v(" 6.浏览器渲染页面的过程")]),s._v(" "),n("p",[s._v("从耗时的角度，浏览器请求、加载、渲染一个页面，时间花在下面五件事情上：")]),s._v(" "),n("ul",[n("li",[s._v("DNS 查询")]),s._v(" "),n("li",[s._v("TCP 连接")]),s._v(" "),n("li",[s._v("HTTP 请求即响应")]),s._v(" "),n("li",[s._v("服务器响应")]),s._v(" "),n("li",[s._v("客户端渲染")])]),s._v(" "),n("p",[s._v("第五个部分，即浏览器对内容的渲染，这一部分（渲染树构建、布局及绘制），又可以分为下面五个步骤：")]),s._v(" "),n("ul",[n("li",[s._v("处理 HTML 标记并构建 DOM 树。")]),s._v(" "),n("li",[s._v("处理 CSS 标记并构建 CSSOM 树。")]),s._v(" "),n("li",[s._v("将 DOM 与 CSSOM 合并成一个渲染树。")]),s._v(" "),n("li",[s._v("根据渲染树来布局，以计算每个节点的几何信息。")]),s._v(" "),n("li",[s._v("将各个节点绘制到屏幕上。")])]),s._v(" "),n("h2",{attrs:{id:"_7-原型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-原型"}},[s._v("#")]),s._v(" 7.原型")]),s._v(" "),n("p",[s._v("所有引用类型（数组、对象、函数）都有一个__proto__隐式原型属性，属性值是一个普通对象。 此外，"),n("strong",[s._v("Object.prototype.__proto__指向null")])]),s._v(" "),n("p",[s._v("所有函数都有一个prototype显式原型属性，属性值是一个普通对象。")]),s._v(" "),n("p",[s._v("Function.prototype.bind()没有prototype属性")]),s._v(" "),n("p",[s._v("所有引用类型（数组、对象、函数）的__proto__执行它的构造函数的prototype属性")]),s._v(" "),n("h2",{attrs:{id:"_8-迭代方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-迭代方法"}},[s._v("#")]),s._v(" 8. 迭代方法")]),s._v(" "),n("ul",[n("li",[s._v("every 查询数组是否每一项都满足条件")]),s._v(" "),n("li",[s._v("some 查询数组中是否有满足条件的项")]),s._v(" "),n("li",[s._v("filter 过滤，返回true的项组成的数组")]),s._v(" "),n("li",[s._v("map 对每一项运行给定函数，返回每次函数调用结果组成的数组")]),s._v(" "),n("li",[s._v("forEach 对每一项运行给定函数，无返回值")]),s._v(" "),n("li",[s._v("reduce 让数组的前一项和后一项做某种计算，累计最终值")]),s._v(" "),n("li",[s._v("find 查找某一项")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var numbers = [1,2,3,4,5,4,3,2,1];\nnumbers.every(function(item,index,array){\n    return item>2;\n})  // false\nnumbers.some(function(item,index,array){\n    return item>2;\n})  // true\nnumbers.filter(function(item,index,array){\n    return item>2;\n})  // [3,4,5,4,3]\nnumbers.map(function(item,index,array){\n    return item*2;\n})  // [2,4,6,8,10,8,6,4,2]\nnumbers.forEach(function(item,index,array){\n    // 执行某些操作\n})  // 无返回值\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("h2",{attrs:{id:"_9-new操作符具体干了什么-理解构造函数相当于一个模板"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-new操作符具体干了什么-理解构造函数相当于一个模板"}},[s._v("#")]),s._v(" 9.new操作符具体干了什么？ （理解构造函数相当于一个模板）")]),s._v(" "),n("ul",[n("li",[s._v("创建一个空对象")]),s._v(" "),n("li",[s._v("将对象的__proto指向构造函数的原型prototype")]),s._v(" "),n("li",[s._v("执行构造函数中的代码，传递参数，并将this指向这个对象")]),s._v(" "),n("li",[s._v("返回对象")])]),s._v(" "),n("h2",{attrs:{id:"_10-继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-继承"}},[s._v("#")]),s._v(" 10.继承")]),s._v(" "),n("p",[s._v("ES5实现思路就是将子类的原型设置为父类的原型")]),s._v(" "),n("p",[s._v("在 ES6 中，我们可以通过 class 语法**(本质也是原型链继承)**")]),s._v(" "),n("h2",{attrs:{id:"_11-闭包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-闭包"}},[s._v("#")]),s._v(" 11.闭包")]),s._v(" "),n("p",[n("strong",[s._v("闭包指有权访问另一个函数内部变量的函数")]),s._v("，当在函数内部定义了其他函数，也就创建了闭包")]),s._v(" "),n("p",[s._v("想要访问一个f1内的变量，在f1内在创建一个函数f2，将f2的值作为返回值，在调用f1时就能访问到f1里面的局部变量")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("场景1：使用函数内部变量")])]),s._v(" "),n("li",[n("p",[s._v("场景2：保存变量在内存中")])]),s._v(" "),n("li",[n("p",[s._v("内存泄露\n闭包会引用包含函数的整个变量对象，如果闭包的作用域链中保存着一个HTML元素，那么就意味着该元素无法被销毁。所以我们有必要在对这个元素操作完之后"),n("strong",[s._v("主动销毁。 = null")])])]),s._v(" "),n("li",[n("p",[s._v("函数内部定时器\n当函数内部的定时器引用了外部函数的变量对象时，该变量对象不会被销毁。")])])]),s._v(" "),n("p",[n("strong",[s._v("应用场景")])]),s._v(" "),n("ul",[n("li",[s._v("设计私有的变量和方法\n模块模式：为单例创建私有的变量和方法")])]),s._v(" "),n("p",[s._v("单例：指的是只有一个实例的对象。一般以对象字面量的方式来创建一个单例对象。")]),s._v(" "),n("p",[n("strong",[s._v("匿名函数最大的用途是创建闭包")]),s._v("，并且还可以构建命名空间，以减少全局变量的使用。从而使用闭包模块化代码，减少全局变量的污染。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/4/11/17167b11438a46b5?w=800&h=522&f=png&s=28549",alt:""}}),s._v("\n在这段代码中函数 addEvent 和 removeEvent 都是局部变量，但我们可以通过全局变量 objEvent 使用它，这就大大减少了全局变量的使用，增强了网页的安全性。")]),s._v(" "),n("ul",[n("li",[s._v("经典面试题，循环中使用闭包解决 var 定义函数的问题")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("for ( var i=1; i<=5; i++) {\n\tsetTimeout( function timer() {\n\t\tconsole.log( i );\n\t}, i*1000 );\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("首先因为 setTimeout 是个异步函数，所有会先把循环全部执行完毕，这时候 i 就是 6 了，所以会输出5个6。")]),s._v(" "),n("p",[s._v("解决办法两种，第一种使用闭包")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("for (var i = 1; i <= 5; i++) {\n  (function(j) {\n    setTimeout(function timer() {\n      console.log(j);\n    }, j * 1000);\n  })(i);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("第二种就是使用 setTimeout 的第三个参数")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("for ( var i=1; i<=5; i++) {\n\tsetTimeout( function timer(j) {\n\t\tconsole.log( j );\n\t}, i*1000, i);\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("第三种就是使用 let 定义 i 了")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("for ( let i=1; i<=5; i++) {\n\tsetTimeout( function timer() {\n\t\tconsole.log( i );\n\t}, i*1000 );\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h2",{attrs:{id:"_12-bom对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-bom对象"}},[s._v("#")]),s._v(" 12.BOM对象")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("window JS最顶层对象\nlocation 浏览器当前URL信息\nnavigator 浏览器本身信息\nscreen 客户端屏幕信息\nhistory 浏览器访问历史信息\nwindow对象的方法\nalert(),prompt(),confirm(),open(),close(),print(),focus(),blur(),moveBy(),moveTo(),resizeBy(),resizeTo(),scrollBy(),scrollTo(),setInterval(),setTimeout(),clearInterval(),clearTimeout()\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h2",{attrs:{id:"_13-拆解url的各部分"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-拆解url的各部分"}},[s._v("#")]),s._v(" 13.拆解url的各部分")]),s._v(" "),n("p",[n("strong",[s._v("使用location的属性")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("href 完整url地址\nprotocol 协议\nhost 主机名+端口号\nhostname 主机名\nport 端口号\npathname 相对路径\nhash #锚点\nsearch ?查询字符串\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("h2",{attrs:{id:"_14-为什么操作dom慢"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_14-为什么操作dom慢"}},[s._v("#")]),s._v(" 14.为什么操作DOM慢？")]),s._v(" "),n("p",[s._v("因为DOM属于渲染引擎的东西，JS又是JS引擎的东西，当我们"),n("strong",[s._v("通过JS操作DOM")]),s._v("的时候，涉及到"),n("strong",[s._v("两个线程间的通信")]),s._v("，而且操作DOM可能会带来"),n("strong",[s._v("重绘回流")]),s._v("的情况，所以就导致了性能问题。")]),s._v(" "),n("p",[s._v("DOM对象本身也是一个js对象，操作了这个对象后，会触发一些浏览器行为，比如布局（layout）和绘制（paint）。\n重绘是当节点改变样式而不影响布局，回流是当布局或几何属性需要改变\n回流必定会发生重绘，回流的成本比重绘高")]),s._v(" "),n("p",[n("strong",[s._v("虚拟dom")]),s._v("\n在浏览器内存中进行渲染")]),s._v(" "),n("h2",{attrs:{id:"_15-dom"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_15-dom"}},[s._v("#")]),s._v(" 15.Dom")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('document.querySelector // 返回第一个匹配的元素\ndocument.querySelectorAll  // 返回匹配的所有元素\n// 获取文档中所有 class="example" 的 <p> 元素\nvar x = document.querySelectorAll("p.example"); \n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("strong",[s._v("DOM事件")]),s._v("\nDOM事件的级别")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("DOM0 element.onclick=function(){}\nDOM2 element.addEventListener('click',function(){},false)\nDOM3 element.addEventListener('keyup',function(){},false)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("DOM0级事件就是将一个函数赋值给一个事件处理属性，缺点在于一个处理程序无法同时绑定多个处理函数。")]),s._v(" "),n("p",[s._v("DOM2级事件运行给一个程序添加多个处理函数，定义了"),n("strong",[s._v("addEventListener")]),s._v("和"),n("strong",[s._v("removeEventListener")]),s._v("两个方法，分别用于绑定和解绑事件，方法包含三个参数分别是绑定的事件处理的属性名称，处理函数，"),n("strong",[s._v("是否在捕获时执行事件")])]),s._v(" "),n("p",[s._v("IE8以下使用attachEvent和detachEvent实现，不需要传入第三个参数，因为IE8以下只支持"),n("strong",[s._v("冒泡型事件")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("btn.attachEvent('onclick', showFn);\nbtn.detachEvent('onclick', showFn);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("DOM3级事件是在DOM2级事件的基础上添加很多事件类型如load,scroll,blur,focus,dbclick,mouseup,mousewheel,textInput,keydown,keypress，同时也允许使用者自定义一些事件")]),s._v(" "),n("h2",{attrs:{id:"_16-js获取盒模型宽高"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_16-js获取盒模型宽高"}},[s._v("#")]),s._v(" 16.js获取盒模型宽高")]),s._v(" "),n("p",[s._v("最常用，兼容性最好** dom.offsetWidth/offsetHeight**")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("offsetWidth/offsetHeight,clientWidth/clientHeight与srcollWidth/scrollHeight的区别\noffsetWidth/offsetHeight返回包含content+padding+border 全部宽高\nclientWidth/clientHeight返回包含content+padding，如果有滚动条，也不包含滚动条\nscrollWidth/scrollHeight返回包含content+paddin+溢出内容的尺寸\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("h2",{attrs:{id:"_17-ajax"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_17-ajax"}},[s._v("#")]),s._v(" 17.Ajax")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// 创建XMLHTTPRequest对象\nvar xhr = new XMLHttpRequest();\n// 创建一个新的http请求\nxhr.open("get", url, true)\n// 设置响应HTTP请求状态变化的函数\nxhr.onreadystatechange = function(){\n    if(xhr.readyState == 4){\n        if(xhr.status == 200){\n            // 获取异步调用返回的数据\n            alert(xhr.responseText)\n        }\n    }\n}\n// 发送HTTP请求\nxhr.send(null);\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("状态码readyState说明：0：未初始化，未调用send()；1：已调用send()，正在发生请求；2:send()方法执行完毕，已经接收到全部响应内容；3：正在解析响应内容；4：解析完成，可以在客户端调用了")]),s._v(" "),n("h2",{attrs:{id:"_18-跨域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_18-跨域"}},[s._v("#")]),s._v(" 18.跨域")]),s._v(" "),n("p",[s._v("跨域指通过JS在不同的域之间进行数据传入或通信。 "),n("strong",[s._v("协议，域名，端口")]),s._v("有一个不同就是跨域\n同源策略是为了防止"),n("strong",[s._v("CSRF攻击")]),s._v("，它是利用用户的登录态发起恶意请求。")]),s._v(" "),n("p",[n("strong",[s._v("解决跨域方式")])]),s._v(" "),n("ul",[n("li",[s._v("JSONP使用简单，兼容性不错但仅限GET请求")]),s._v(" "),n("li",[s._v("CORS服务器端设置Access-Control-Origin开启CORS，该属性表明哪些域名可以访问资源。")]),s._v(" "),n("li",[s._v("document.domain 只适用于二级域名相同，a.test.com。在页面添加docuemtn.domain = 'test.com'表示二级域名相同即可跨域")]),s._v(" "),n("li",[s._v("postMessage 通常用于获取嵌入页面(iframe)的第三方页面数据，一个页面发送消息，另一个页面判断来源并接收消息")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 发送消息\nwindow.parent.postMessage('message', 'http://www.test.com')\n// 接收消息\nlet mc=new MessageChannel()\nmc.addEventListener('message', event => {\n    let origin = event.origin || event.originalEvent.origin;\n    if(origin === 'http://www.test.com'){\n        console.log('验证通过')\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h2",{attrs:{id:"_19-server-worker的工作-缓存文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_19-server-worker的工作-缓存文件"}},[s._v("#")]),s._v(" 19.Server Worker的工作？   缓存文件")]),s._v(" "),n("p",[s._v("与缓存进行交互，当用户请求缓存中的东西时，Service Worker能立刻从缓存中获取数据不通过外部https调用,传输协议必须为https，目前该技术通常用来做缓存文件，提高"),n("strong",[s._v("首屏速度")])]),s._v(" "),n("h2",{attrs:{id:"_20-indexdb"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_20-indexdb"}},[s._v("#")]),s._v(" 20.indexDB")]),s._v(" "),n("p",[s._v("Cookie 的大小不超过4KB，且每次请求都会发送回服务器；LocalStorage 在 2.5MB 到 10MB 之间（各家浏览器不同），而且不提供搜索功能，不能建立自定义的索引。"),n("strong",[s._v("indexDB都可以做到，存储无上限")])]),s._v(" "),n("p",[s._v("****21.浅拷贝 && 深拷贝\n栈（stack）为自动分配的内存空间，它由系统自动释放，存放"),n("strong",[s._v("基本类型")]),s._v("（不可改变））")]),s._v(" "),n("p",[s._v("堆（heap）则是动态分配的内存，大小不定也不会自动释放，存放"),n("strong",[s._v("引用类型")]),s._v("。")]),s._v(" "),n("p",[s._v("基本类型的比较是值的比较，只要它们的值相等就认为他们是相等的")]),s._v(" "),n("p",[s._v("引用类型的比较是引用的比较，比较是否指向同一块堆内存")]),s._v(" "),n("p",[s._v("基本数据类型的赋值（=）是在内存中新开辟一段栈内存，然后再把再将值赋值到新的栈中。")]),s._v(" "),n("p",[s._v("引用类型的赋值是传址。只是"),n("strong",[s._v("改变指针的指向")])]),s._v(" "),n("p",[s._v("深拷贝：将 B 对象拷贝到 A 对象中，包括 B 里面的子对象，")]),s._v(" "),n("p",[s._v("浅拷贝：将 B 对象拷贝到 A 对象中，但不包括 B 里面的子对象")]),s._v(" "),n("p",[s._v("深拷贝：")]),s._v(" "),n("ul",[n("li",[s._v("JSON.parse(JSON.stringify(Obj))对象中存在循环对象无法处理")]),s._v(" "),n("li",[s._v("Object.create()")]),s._v(" "),n("li",[s._v("Object.assign() 对象只有一层")]),s._v(" "),n("li",[s._v("obj2 = _.cloneDeep(obj1) 复杂情况的深拷贝使用lodash实现\n浅拷贝：")]),s._v(" "),n("li",[s._v("= 赋值")]),s._v(" "),n("li",[s._v("...  es6展开符")]),s._v(" "),n("li",[s._v("object.assign()  对象有多层")])]),s._v(" "),n("h2",{attrs:{id:"_21-flex-rem-vw-wh"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_21-flex-rem-vw-wh"}},[s._v("#")]),s._v(" 21.flex + rem + vw wh")]),s._v(" "),n("p",[s._v("rem 自动转换：使用lib-flexible和px2rem")]),s._v(" "),n("ul",[n("li",[s._v("flex\nflex 是 flex-grow（放大），flex-shrink （缩放）和 flex-based （基本）的缩写  默认"),n("strong",[s._v("flex:0 1 auto")]),s._v(";")])]),s._v(" "),n("p",[s._v("flex-grow 控制的是 flex 项的拉伸比例，而不是占据 flex 容器的空间比例。当设置为 0 时，该 flex 项将不会被拉伸去填补剩余空间\n两个项的比例是 1:2，意思是在被拉伸时，第一个 flex 项将占用 1/3，而第二个 flex 项将占据余下的空间。")]),s._v(" "),n("p",[s._v("flex-shrink相反")]),s._v(" "),n("p",[s._v("flex-based 自定义元素宽度，200px ,10%都行")]),s._v(" "),n("p",[s._v("以下6个属性设置在容器上。")]),s._v(" "),n("ul",[n("li",[s._v("flex-direction")]),s._v(" "),n("li",[s._v("flex-wrap")]),s._v(" "),n("li",[s._v("flex-flow")]),s._v(" "),n("li",[s._v("justify-content")]),s._v(" "),n("li",[s._v("align-items")]),s._v(" "),n("li",[s._v("align-content")])]),s._v(" "),n("p",[s._v("以下6个属性设置在项目上。")]),s._v(" "),n("ul",[n("li",[s._v("order")]),s._v(" "),n("li",[s._v("flex-grow")]),s._v(" "),n("li",[s._v("flex-shrink")]),s._v(" "),n("li",[s._v("flex-basis")]),s._v(" "),n("li",[s._v("flex")]),s._v(" "),n("li",[s._v("align-self")])]),s._v(" "),n("h3",{attrs:{id:"rem"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#rem"}},[s._v("#")]),s._v(" rem")]),s._v(" "),n("p",[s._v("计算方式： 设计稿px  /  根节点px  =  真实rem")]),s._v(" "),n("p",[s._v("flexible实际上就是能过JS来动态改写meta标签，动态改写")]),n("meta"),s._v("标签"),n("p"),s._v(" "),n("p",[s._v("给"),n("code",[s._v("<html>")]),s._v("元素添加data-dpr属性，并且动态改写data-dpr的值\n给"),n("code",[s._v("<html>")]),s._v("元素添加font-size属性，并且动态改写font-size的值")]),s._v(" "),n("h3",{attrs:{id:"vh-vw"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vh-vw"}},[s._v("#")]),s._v(" vh vw")]),s._v(" "),n("p",[s._v("vh vw是相对视口（viewport）的宽度而定的，长度等于视口宽度的1/100，当前屏幕可见高度的1%。 假如浏览器的宽度为200px，那么1vw就等于2px（200px/100）。")]),s._v(" "),n("p",[s._v("vh是相对视口（viewport）的高度而定的，长度等于视口高度的1/100。 假如浏览器的高度为500px，那么1vh就等于5px（500px/100\ncalc(100vh - 10px)  表示整个浏览器窗口高度减去10px的大小")]),s._v(" "),n("h2",{attrs:{id:"_22-js-结果舍入运算"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_22-js-结果舍入运算"}},[s._v("#")]),s._v(" 22.js 结果舍入运算")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("x.toFixed( num)  将x保留num位小数  银行家舍入：四舍六入五考虑，五后非零就进一，五后为零看奇偶，五前为偶应舍去，五前为奇要进一。四舍六入五取偶\nMath.round(x)   四舍五入 round() 方法可把一个数字舍入为最接近的整数\nparseInt() 丢弃小数部分,保留整数部分\nMath.ceil() 向上取整,有小数就整数部分加1 \nMath.floor()  向下取整\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h2",{attrs:{id:"_23-this"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_23-this"}},[s._v("#")]),s._v(" 23. this")]),s._v(" "),n("ul",[n("li",[s._v("this指向")])]),s._v(" "),n("p",[s._v("定义：this的指向在函数定义的时候是确定不了的，只有"),n("strong",[s._v("函数执行")]),s._v("的时候才能确定this到底指向谁，实际上this的最终指向的是那个"),n("strong",[s._v("调用它的对象")])]),s._v(" "),n("p",[s._v("总结：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1.在普通函数内部，this的指向是window\n2.在方法内部，this的指向是方法的拥有者。\n3.在箭头函数内部，this指向是创建箭头函数时所在的环境中的this指向的值。\n4.在对象中，this指向当前对象\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("这里的this指向会发生改变")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("5.计时器中的this\n6.回调函数中的this\n7.事件处理函数中的this指向事件的绑定者\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("h2",{attrs:{id:"_24-安全"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_24-安全"}},[s._v("#")]),s._v(" 24.安全")]),s._v(" "),n("p",[n("strong",[s._v("XSS")])]),s._v(" "),n("p",[s._v("XSS 通过修改 HTML 节点或者执行 JS 代码来攻击网站。\n最普遍的做法是转义（replace）输入输出的内容，对于引号，尖括号，斜杠进行转义。显示富文本的采用白名单过滤的方式")]),s._v(" "),n("p",[s._v("CSP CSP 本质上也是建立白名单，通常可以通过 HTTP Header 中的 Content-Security-Policy 来开启 CSP")]),s._v(" "),n("p",[n("strong",[s._v("CSRF")])]),s._v(" "),n("p",[s._v("CSRF 就是利用用户的登录态发起恶意请求。\n防御：1.请求时附带验证信息，比如验证码或者 token\n2.验证 Referer:对于需要防范 CSRF 的请求，我们可以通过验证 Referer 来判断该请求是否为第三方网站发起的。\n3.Token:服务器下发一个随机 Token，每次发起请求时将 Token 携带上，服务器验证 Token 是否有效\n4.信息加密")]),s._v(" "),n("p",[n("strong",[s._v("SQL注入")])]),s._v(" "),n("p",[s._v("就是攻击者把SQL命令插入到Web表单的输入域或页面请求的查询字符串，欺骗服务器执行恶意的SQL命令。 攻击者通过在应用程序预先定义好的SQL语句结尾加上额外的SQL语句元素，欺骗数据库服务器执行非授权的查询,篡改命令。")]),s._v(" "),n("p",[s._v("参数化查询已被视为最有效的可防御SQL注入攻击的防御方式。目前主流的ORM 框架都内置支持并且推荐使用这种方式进行持久层封装。\n参数化查询是指在设计与数据库链接并访问数据时，在需要填入数值或数据的地方，使用参数来给值。")]),s._v(" "),n("h2",{attrs:{id:"_25-为什么不推荐使用setinterval"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_25-为什么不推荐使用setinterval"}},[s._v("#")]),s._v(" 25.为什么不推荐使用setInterval")]),s._v(" "),n("p",[s._v("js 的执行原理：js引擎是单线程的，主要分为主线程和事件队列，同步操作是在主线程上执行，而异步操作的函数会先放在事件队列当中，等到js主线程空闲了，才会去事件队列取出放到主线程执行。定时器是属于异步事件，参数里面设置的时间，并不是延迟多少秒去执行回调函数，这个时间代表的是延迟多少秒，把回调函数放到异步队列，等待主线程空闲再被执行。")]),s._v(" "),n("p",[s._v("如果当事件队列当中，已经存在了定时器的回调函数，即使已经到了规定的间隔时间，也不会再把这个时间点的定时器回调函数放到事件队列当中，定时器依旧运行。当下一个约定时间又到了，如果事件队列当中依然存在定时器的回调函数，这个时间点的定时器回调函数也不会放进事件队列…")]),s._v(" "),n("h2",{attrs:{id:"_26-中文版chrome浏览器不支持12px以下字体的解决方案"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_26-中文版chrome浏览器不支持12px以下字体的解决方案"}},[s._v("#")]),s._v(" 26.中文版Chrome浏览器不支持12px以下字体的解决方案")]),s._v(" "),n("p",[s._v("一般解决方案是禁止webkit浏览器配置调整网页的字体大小。如下CSS定义方式：\n"),n("code",[s._v(".classstyle{ -webkit-text-size-adjust:none; font-size:9px; }")])]),s._v(" "),n("h2",{attrs:{id:"_27-getelementby-和-queryselector-区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_27-getelementby-和-queryselector-区别"}},[s._v("#")]),s._v(" 27.getElementBy*  和 querySelector 区别")]),s._v(" "),n("p",[s._v("getElementById / querySelector 这两个获取到的都是dom节点，结果没有区别。")]),s._v(" "),n("p",[s._v("getElement* 的实时性体现在返回集合的时候，我们知道getElementsBy*和querySelectorAll返回的都是一个节点集合，类似于数组，两种方法的区别就在于"),n("strong",[s._v("这个集合会不会自动更新")]),s._v("。")]),s._v(" "),n("p",[n("strong",[s._v("getEle会，queryS不会")])]),s._v(" "),n("h2",{attrs:{id:"_28-async-与-promise-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_28-async-与-promise-的区别"}},[s._v("#")]),s._v(" 28.async 与 promise 的区别")]),s._v(" "),n("ul",[n("li",[s._v("async/await让try/catch 可以同时处理同步和异步错误。")]),s._v(" "),n("li",[s._v("Promise  then 中try/catch不能处理JSON.parse的错误")])]),s._v(" "),n("h2",{attrs:{id:"_30-手写-call-apply-bind"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_30-手写-call-apply-bind"}},[s._v("#")]),s._v(" 30.手写 call apply bind")]),s._v(" "),n("h3",{attrs:{id:"call"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#call"}},[s._v("#")]),s._v(" call")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Function.prototype.myCall = function(context) {\n  // 判断是否是undefined和null\n  if (typeof context === 'undefined' || context === null) {\n    context = window\n  }\n  context.fn = this\n  let args = [...arguments].slice(1)\n  let result = context.fn(...args)\n  delete context.fn\n  return result\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h3",{attrs:{id:"apply"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#apply"}},[s._v("#")]),s._v(" apply")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Function.prototype.myApply = function(context) {\n  if (typeof context === 'undefined' || context === null) {\n    context = window\n  }\n  context.fn = this\n  let args = arguments[1]\n  let result\n  if (args) {\n    result = context.fn(...args)\n  } else {\n    result = context.fn()\n  }\n  delete context.fn\n  return result\n}\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("h3",{attrs:{id:"bind"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bind"}},[s._v("#")]),s._v(" bind")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Function.prototype.myBind = function(context) {\n  if (typeof this !== 'function') {\n    throw new TypeError('Error')\n  }\n  let _this = this\n  let args = [...arguments].slice(1)\n  return function F() {\n    // 判断是否被当做构造函数使用\n    if (this instanceof F) {\n      return _this.apply(this, args.concat([...arguments]))\n    }\n    return _this.apply(context, args.concat([...arguments]))\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h2",{attrs:{id:"_31-手写-promise"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_31-手写-promise"}},[s._v("#")]),s._v(" 31.手写 promise")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('        const PENDING = "pending";//初始值，不是fulfilled，也不是rejected\n        const FULFILLED = "filfilled";//代表操作成功\n        const REJECTED = "rejected";//代表操作失败\n\n        function myPromise(fn) {\n            console.log(1);\n            let that = this;\n            that.state = PENDING;\n            that.value = null;\n            that.resolvedCallBacks = [];\n            that.rejectedCallBacks = [];\n\n            // 首先两个函数都得判断当前状态是否为等待中，因为规范规定只有等待态才可以改变状态\n            // 将当前状态更改为对应状态，并且将传入的值赋值给 value\n            // 遍历回调数组并执行\n\n            function resolve(value) {\n                console.log(2);\n\n                if (that.state == PENDING) {\n                    that.value = value;\n                    that.resolvedCallBacks.map(cb => that.value);\n                }\n            };\n            function reject(value) {\n                console.log(3);\n\n                if (that.state == PENDING) {\n                    that.value = value;\n                    that.rejectedCallBacks.map(cb => that.value);\n                }\n            };\n\n            // 实现很简单，执行传入的参数并且将之前两个函数当做参数传进去\n            // 要注意的是，可能执行函数过程中会遇到错误，需要捕获错误并且执行 reject 函数\n            try {\n                console.log(4);\n\n                fn(resolve, reject)\n            } catch (e) {\n                console.log(5);\n\n                reject(e)\n            }\n        }\n\n        myPromise.prototype.then = function (onFulfilled, onRejected) {\n            const that = this;\n            console.log(6);\n            // 首先判断两个参数是否为函数类型，因为这两个参数是可选参数\n            // 当参数不是函数类型时，需要创建一个函数赋值给对应的参数，同时也实现了透传\n            onFulfilled = typeof onFulfilled === "function" ? onFulfilled : v => v;\n            onRejected = typeof onRejected === "function" ? onRejected : r => { throw r };\n            // 接下来就是一系列判断状态的逻辑，当状态不是等待态时，就去执行相对应的函数。\n            // 如果状态是等待态的话，就往回调函数中 push 函数\n            if (that.state === PENDING) {\n                that.resolvedCallBacks.push(onFulfilled);\n                that.rejectedCallBacks.push(onRejected);\n            }\n            if (that.state === FULFILLED) {\n                onFulfilled(that.value)\n            }\n            if (that.state === REJECTED) {\n                onRejected(that.value)\n            }\n        }\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br"),n("span",{staticClass:"line-number"},[s._v("61")]),n("br"),n("span",{staticClass:"line-number"},[s._v("62")]),n("br"),n("span",{staticClass:"line-number"},[s._v("63")]),n("br"),n("span",{staticClass:"line-number"},[s._v("64")]),n("br"),n("span",{staticClass:"line-number"},[s._v("65")]),n("br"),n("span",{staticClass:"line-number"},[s._v("66")]),n("br")])]),n("h3",{attrs:{id:"调用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#调用"}},[s._v("#")]),s._v(" 调用")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("       new myPromise((resolve, reject) => {\n            setTimeout(() => {\n                resolve(1)\n            }, 3000)\n        }).then(res => {\n            console.log(res)\n            console.log(7)\n        }, err => {\n            console.log(8)\n        })\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h2",{attrs:{id:"_32-手写-防抖节流"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_32-手写-防抖节流"}},[s._v("#")]),s._v(" 32.手写 防抖节流")]),s._v(" "),n("h3",{attrs:{id:"防抖-某个函数在短时间内只执行最后一次。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#防抖-某个函数在短时间内只执行最后一次。"}},[s._v("#")]),s._v(" 防抖：某个函数在短时间内只执行最后一次。")]),s._v(" "),n("p",[s._v("函数被触发时，需要先延迟，在延迟的时间内，如果再次被触发，则取消之前的延迟，重新开始延迟。这样就能达到，只响应最后一次，其余的请求都过滤掉。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("export const Debounce = (fn, t) => {\n  const delay = t || 500;\n  let timer;\n  return function () {\n    const args = arguments;\n\n    if (timer) {\n      clearTimeout(timer);\n    }\n\n    timer = setTimeout(() => {\n      timer = null;\n      fn.apply(this, args);\n    }, delay);\n  };\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("h3",{attrs:{id:"节流-某个函数在指定时间段内只执行第一次-直到指定时间段结束-周而复始。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#节流-某个函数在指定时间段内只执行第一次-直到指定时间段结束-周而复始。"}},[s._v("#")]),s._v(" 节流：某个函数在指定时间段内只执行第一次，直到指定时间段结束，周而复始。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("export const throttle = (func, interval) => {\n    let flag = null;\n    return function(...args) {\n        if (!flag) {\n            flag = true;\n            setTimeout(() => {\n                flag = false;\n                fn.call(this, ...args);\n            }, interval);\n        }\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h3",{attrs:{id:"bfc-块级格式化上下文"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bfc-块级格式化上下文"}},[s._v("#")]),s._v(" BFC 块级格式化上下文")]),s._v(" "),n("p",[s._v("BFC是一个独立的布局环境，其中的元素布局是不受外界的影响，并且在一个BFC中，块盒与行盒（行盒由一行中所有的内联元素所组成）都会垂直的沿着其父元素的边框排列。")]),s._v(" "),n("p",[s._v("一个HTML元素要创建BFC，则满足下列的任意一个或多个条件即可：")]),s._v(" "),n("ul",[n("li",[s._v("1、float的值不是none。")]),s._v(" "),n("li",[s._v("2、position的值不是static或者relative。")]),s._v(" "),n("li",[s._v("3、display的值是inline-block、table-cell、flex、table-caption或者inline-flex")]),s._v(" "),n("li",[s._v("4、overflow的值不是visible")])]),s._v(" "),n("h3",{attrs:{id:"从url输入到页面加载过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#从url输入到页面加载过程"}},[s._v("#")]),s._v(" 从URL输入到页面加载过程")]),s._v(" "),n("p",[s._v("流程：缓存 -> DNS解析 -> TCP三次握手 -> HTTP请求 -> 数据响应 -> 页面渲染 -> TCP四次挥手")]),s._v(" "),n("p",[s._v("浏览器渲染：创建DOM树—创建StyleRules—创建Render树—布局Layout—绘制")]),s._v(" "),n("p",[s._v("参考："),n("a",{attrs:{href:"https://www.cnblogs.com/daijinxue/p/6640153.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("从输入url到页面加载完成发生了什么？"),n("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=a.exports}}]);