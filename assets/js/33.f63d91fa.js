(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{576:function(a,e,t){"use strict";t.r(e);var r=t(7),v=Object(r.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("blockquote",[t("p",[a._v("一些常用的函数还是要掌握下的，提高开发效率，减少线上bug\n")])]),a._v(" "),t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[a._v("#")]),a._v(" 前言")]),a._v(" "),t("p",[a._v("lodash作为现在的主流类库，也是要好好学习一下的，同事写代码里面经常有看到，不会的话也看不懂。关键是确实挺好用的，虽然很多工具类可以自己写，但是自己写的大概率存在各种漏洞。")]),a._v(" "),t("p",[a._v("跟着官网过一遍：")]),a._v(" "),t("p",[t("a",{attrs:{href:"https://www.lodashjs.com/",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://www.lodashjs.com/"),t("OutboundLink")],1)]),a._v(" "),t("h2",{attrs:{id:"array"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#array"}},[a._v("#")]),a._v(" Array")]),a._v(" "),t("ul",[t("li",[a._v("chunk 拆分数组")]),a._v(" "),t("li",[t("code",[a._v("compact")]),a._v('去除数组中的假值false, null, 0, "", undefined, 和 NaN\nconcat （arr, value）合并数组和值，合并的数组可以扁平一层')]),a._v(" "),t("li",[t("code",[a._v("difference")]),a._v(" （arr1, arr2） 对比数组，返回arr1中，arr2没有的部分")]),a._v(" "),t("li",[a._v("drop(arr , n) 去除数组的前n项 默认1")]),a._v(" "),t("li",[a._v("dropRight (arr, n) 去除数组尾部n项 默认1")]),a._v(" "),t("li",[a._v("find（arr， function | object | 属性） 查找符合条件的某一项")]),a._v(" "),t("li",[a._v("flatten(array) 减少一级嵌套")]),a._v(" "),t("li",[t("code",[a._v("flattenDeep")]),a._v("(array,depth)将array递归为一维数组。可指定减少的层级")]),a._v(" "),t("li",[a._v("fromPairs(pairs) 数组转换为对象键值对")]),a._v(" "),t("li",[a._v("head(array) 返回数组第一项")]),a._v(" "),t("li",[a._v("intersection([arrays]) 获取多个数组的交集")]),a._v(" "),t("li",[a._v("nth(array, [n=0])获取array数组的第n个元素。如果n为负数，则返回从数组结尾开始的第n个元素。 n  - 下标")]),a._v(" "),t("li",[a._v("pull(array, [values]) 删除数组中给定的值，改变原数组")]),a._v(" "),t("li",[a._v("take(array, [n=1]) 从头开始提取n个元素")]),a._v(" "),t("li",[t("code",[a._v("uniq")]),a._v(" 数组去重")]),a._v(" "),t("li",[a._v("without(array, [values]) 剔除所有给定值的新数组，")]),a._v(" "),t("li",[a._v("xor([arrays])创建一个给定数组唯一值的数组 合并数组，取唯一值")]),a._v(" "),t("li",[a._v("zip([arrays])将多个数组index相同的项合并成数组")]),a._v(" "),t("li",[a._v("zipObject([props=[]], [values=[]]) 合并成键值对形式的对象")])]),a._v(" "),t("h2",{attrs:{id:"collection"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#collection"}},[a._v("#")]),a._v(" Collection")]),a._v(" "),t("ul",[t("li",[a._v("flatMap(collection, [iteratee=_.identity])扁平化（同阶数组）数组")]),a._v(" "),t("li",[a._v("reject(collection, [predicate="),t("em",[a._v(".identity])")]),a._v(".filter的反向方法")]),a._v(" "),t("li",[a._v("size(collection)返回collection（集合）的长度，如果集合是类数组或字符串，返回其 length ；如果集合是对象，返回其可枚举属性的个数。")]),a._v(" "),t("li",[a._v("sortBy(collection, [iteratees=[_.identity]])升序排序。 这个方法执行稳定排序")]),a._v(" "),t("li",[a._v("Date")]),a._v(" "),t("li",[a._v("now()直到现在的毫秒数")])]),a._v(" "),t("h2",{attrs:{id:"lang"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lang"}},[a._v("#")]),a._v(" Lang")]),a._v(" "),t("ul",[t("li",[a._v("castArray(value)如果 value 不是数组, 那么强制转为数组。")]),a._v(" "),t("li",[a._v("clone(value)浅拷贝。")]),a._v(" "),t("li",[t("code",[a._v("cloneDeep")]),a._v("(value)深拷贝。")]),a._v(" "),t("li",[a._v("isArguments(value)检查 value 是否是一个类 arguments 对象。")]),a._v(" "),t("li",[t("code",[a._v("isNil")]),a._v("(value)检查 value 是否是 null 或者 undefined。")]),a._v(" "),t("li",[a._v("max(array)min(array)计算 array 中的最大值/最小值。 如果 array 是 空的或者假值将会返回 undefined。")]),a._v(" "),t("li",[a._v("mean(array)计算 array 的平均值。")]),a._v(" "),t("li",[a._v("get(object, path, [defaultValue])根据 object对象的path路径获取值。 如果解析 value 是 undefined 会以 defaultValue 取代。")]),a._v(" "),t("li",[a._v("invert(object)创建一个object键值倒置后的对象。如果 object 有重复的值，后面的值会覆盖前面的值。")]),a._v(" "),t("li",[a._v("invoke(object, path, [args])调用object对象path上的方法。")]),a._v(" "),t("li",[t("code",[a._v("pic")]),a._v("k`(object, [props])创建一个从 object 中选中的属性的对象。")]),a._v(" "),t("li",[t("code",[a._v("omit")]),a._v("(object, [props])反向pick")]),a._v(" "),t("li",[a._v("set(object, path, value)设置 object对象中对应 path 属性路径上的值，")])]),a._v(" "),t("h2",{attrs:{id:"string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[a._v("#")]),a._v(" String")]),a._v(" "),t("ul",[t("li",[a._v("camelCase([string=''])转换字符串string为 驼峰写法。")]),a._v(" "),t("li",[a._v("capitalize([string=''])转换字符串string首字母为大写，剩下为小写。")]),a._v(" "),t("li",[a._v("repeat([string=''], [n=1])重复 N 次给定字符串。")]),a._v(" "),t("li",[a._v("replace([string=''], pattern, replacement)替换string字符串中匹配的pattern为给定的replacement 。")])])])}),[],!1,null,null,null);e.default=v.exports}}]);